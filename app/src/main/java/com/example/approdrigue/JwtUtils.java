package com.example.approdrigue;

import android.util.Base64;

import org.json.JSONObject;

/**
 * Classe utilitaire pour travailler avec les **tokens JWT** (JSON Web Token).
 * Elle permet de :
 * - v√©rifier si un token est expir√©
 * - d√©coder la partie "payload" du token
 */
public final class JwtUtils {

    // üîí Constructeur priv√© : emp√™che l‚Äôinstanciation de cette classe utilitaire
    private JwtUtils() {}

    /**
     * üîπ V√©rifie si un token est expir√© (ou invalide).
     *
     * @param idToken le token JWT √† analyser
     * @return true si le token est expir√© ou mal form√©
     */
    public static boolean isTokenExpired(String idToken) {
        try {
            // üî∏ Un token JWT est compos√© de 3 parties : header.payload.signature
            String[] parts = idToken.split("\\.");

            // ‚úÖ V√©rifie qu‚Äôil y a bien 3 parties
            if (parts.length != 3) {
                return true; // token mal form√©
            }

            // üî∏ D√©codage du payload (partie 2)
            String payload = new String(
                    Base64.decode(
                            parts[1],
                            Base64.URL_SAFE | Base64.NO_PADDING | Base64.NO_WRAP
                    )
            );

            // üî∏ Conversion en JSON pour acc√©der aux champs internes
            JSONObject json = new JSONObject(payload);

            // üî∏ Extraction du champ "exp" (expiration timestamp en secondes)
            long exp = json.getLong("exp");

            // üî∏ Heure actuelle (en secondes)
            long now = System.currentTimeMillis() / 1000L;

            // ‚ùå Retourne true si le token est d√©j√† expir√©
            return now >= exp;

        } catch (Exception e) {
            // ‚ö†Ô∏è Si une exception survient (ex : mal form√©), on consid√®re que le token est invalide
            return true;
        }
    }

    /**
     * üîπ D√©code le contenu (payload) d‚Äôun JWT.
     *
     * @param token le token JWT √† analyser
     * @return un objet JSON repr√©sentant le payload
     * @throws Exception si le token est mal form√© ou le d√©codage √©choue
     */
    public static JSONObject decodePayload(String token) throws Exception {
        String[] parts = token.split("\\.");

        // ‚ùå V√©rifie qu‚Äôil y a bien 3 parties
        if (parts.length != 3) {
            throw new IllegalArgumentException("Malformed JWT");
        }

        // üî∏ D√©codage du payload (partie 2)
        String payload = new String(
                Base64.decode(
                        parts[1],
                        Base64.URL_SAFE | Base64.NO_PADDING | Base64.NO_WRAP
                )
        );

        // üî∏ Retourne le payload en tant qu‚Äôobjet JSON
        return new JSONObject(payload);
    }
}

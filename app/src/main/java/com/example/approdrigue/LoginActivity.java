package com.example.approdrigue;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.amplifyframework.auth.cognito.AWSCognitoAuthSession;
import com.amplifyframework.auth.options.AuthWebUISignInOptions;
import com.amplifyframework.auth.result.AuthSessionResult;
import com.amplifyframework.core.Amplify;

/**
 * Activit√© de connexion qui utilise Amazon Cognito via AWS Amplify.
 * Elle permet √† l'utilisateur de se connecter avec une interface web (OAuth).
 */
public class LoginActivity extends AppCompatActivity {
    private static final String TAG = "LoginActivity"; // Pour les logs
    private Button btnLogin; // Bouton de connexion

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // üîπ √âtape 1 : (facultatif ici) on pourrait configurer Amplify ici,
        // mais apparemment c'est d√©j√† fait dans une autre classe.
        try {
            Log.i(TAG, "Amplify configur√©"); // Juste un log ici
        } catch (Exception e) {
            Log.e(TAG, "Erreur configuration Amplify", e);
        }

        // üîπ √âtape 2 : Affichage de la vue `activity_login.xml`
        setContentView(R.layout.activity_login);

        // üîπ R√©cup√®re le bouton de login dans le layout
        btnLogin = findViewById(R.id.btnLogin);

        // üîπ Quand on clique sur le bouton, on lance la proc√©dure de connexion
        btnLogin.setOnClickListener(v -> startSignIn());

        // üîπ √âtape 3 : V√©rifie si l'utilisateur est d√©j√† connect√©
        Amplify.Auth.fetchAuthSession(
                session -> {
                    // ‚úÖ Si l'utilisateur est connect√©, on peut directement passer √† l'√©cran suivant
                    if (session.isSignedIn() &&
                            session instanceof AWSCognitoAuthSession) {
                        goToDashboard();
                    }
                },
                error -> Log.e(TAG, "√âchec fetchAuthSession", error) // ‚ùå Si erreur, on affiche un log
        );
    }

    /**
     * Cette m√©thode est appel√©e quand l‚Äôactivit√© re√ßoit un "Intent" apr√®s une redirection web (OAuth).
     * Elle permet de finaliser la connexion Cognito.
     */
    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        Amplify.Auth.handleWebUISignInResponse(intent); // Permet de finaliser la redirection de Cognito
    }

    /**
     * D√©marre le processus de connexion via l‚Äôinterface WebUI de Cognito.
     */
    private void startSignIn() {
        Amplify.Auth.signInWithWebUI(
                this, // contexte Android
                AuthWebUISignInOptions.builder().build(), // options par d√©faut
                result -> {
                    // ‚úÖ Connexion r√©ussie
                    Log.i(TAG, "Connexion r√©ussie");
                    fetchSessionAndProceed(); // On r√©cup√®re les tokens
                },
                error -> {
                    // ‚ùå Si une erreur se produit
                    String msg = error.getMessage() != null
                            ? error.getMessage().toLowerCase()
                            : "";

                    // Cas particulier : utilisateur d√©j√† connect√©
                    if (msg.contains("already a user signed in")) {
                        Log.w(TAG, "D√©j√† connect√©, on poursuit");
                        fetchSessionAndProceed();
                    } else {
                        // On affiche un message d'erreur dans l'UI
                        runOnUiThread(() -> {
                            Log.e(TAG, "Erreur signInWithWebUI", error);
                            Toast.makeText(this,
                                    "√âchec connexion: " + error.getMessage(),
                                    Toast.LENGTH_LONG).show();
                        });
                    }
                }
        );
    }

    /**
     * R√©cup√®re les tokens JWT depuis la session Cognito,
     * puis les enregistre en local pour les futurs appels API.
     */
    private void fetchSessionAndProceed() {
        Amplify.Auth.fetchAuthSession(
                session -> {
                    // ‚úÖ V√©rifie que la session est valide et qu‚Äôon utilise Cognito
                    if (session.isSignedIn() &&
                            session instanceof AWSCognitoAuthSession) {
                        AWSCognitoAuthSession cognito =
                                (AWSCognitoAuthSession) session;

                        // ‚úÖ On v√©rifie que les tokens sont bien r√©cup√©r√©s
                        if (cognito.getUserPoolTokensResult()
                                .getType() == AuthSessionResult.Type.SUCCESS) {

                            // üîê On r√©cup√®re les tokens JWT
                            String accessToken =
                                    cognito.getUserPoolTokensResult()
                                            .getValue()
                                            .getAccessToken();

                            String idToken =
                                    cognito.getUserPoolTokensResult()
                                            .getValue()
                                            .getIdToken();

                            // üíæ On les sauvegarde via une classe utilitaire (non visible ici)
                            AuthService.saveTokens(this, accessToken, idToken);

                            // üîÅ Ensuite on passe √† l‚Äôactivit√© principale
                            goToDashboard();
                        }
                    }
                },
                error -> Log.e(TAG, "Erreur fetchAuthSession", error) // ‚ùå Log si erreur
        );
    }

    /**
     * Redirige l‚Äôutilisateur vers l‚Äôactivit√© Dashboard.
     */
    private void goToDashboard() {
        runOnUiThread(() -> {
            // Cr√©e une Intent vers l‚Äôactivit√© Dashboard
            startActivity(
                    new Intent(LoginActivity.this,
                            DashboardActivity.class)
            );
            finish(); // Termine LoginActivity pour √©viter de revenir dessus
        });
    }
}
